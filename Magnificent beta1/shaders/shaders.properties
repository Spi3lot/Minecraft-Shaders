oldLighting = false
separateAo = true
oldHandLight = true

size.buffer.colortex4=4096 4096
size.buffer.colortex5=4096 4096

uniform.vec3.upVector = vec3(0.0, 1.0, 0.0)

variable.float.sunVectorNorm = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
uniform.vec3.sunVectorView = vec3(sunPosition.x * sunVectorNorm, sunPosition.y * sunVectorNorm, sunPosition.z * sunVectorNorm)
variable.float.sunVectorX = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunVectorY = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunVectorZ = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
uniform.vec3.sunVector = vec3(sunVectorX * sunVectorNorm, sunVectorY * sunVectorNorm, sunVectorZ * sunVectorNorm)

variable.float.moonVectorNorm = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
uniform.vec3.moonVectorView = vec3(moonPosition.x * moonVectorNorm, moonPosition.y * moonVectorNorm, moonPosition.z * moonVectorNorm)
variable.float.moonVectorX = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonVectorY = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonVectorZ = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
uniform.vec3.moonVector = vec3(moonVectorX * moonVectorNorm, moonVectorY * moonVectorNorm, moonVectorZ * moonVectorNorm)

uniform.vec2.viewSize=vec2(viewWidth, viewHeight)
uniform.vec2.viewPixelSize=vec2(1.0/viewWidth, 1.0/viewHeight)

variable.int.frameMod16 = frameCounter % 16
uniform.vec2.taaOffset = vec2((if( \
	frameMod16 ==  0,  1.0 /  2.0, frameMod16 ==  1,  1.0 /  4.0, \
	frameMod16 ==  2,  3.0 /  4.0, frameMod16 ==  3,  1.0 /  8.0, \
	frameMod16 ==  4,  5.0 /  8.0, frameMod16 ==  5,  3.0 /  8.0, \
	frameMod16 ==  6,  7.0 /  8.0, frameMod16 ==  7,  1.0 / 16.0, \
	frameMod16 ==  8,  9.0 / 16.0, frameMod16 ==  9,  5.0 / 16.0, \
	frameMod16 == 10, 13.0 / 16.0, frameMod16 == 11,  3.0 / 16.0, \
	frameMod16 == 12, 11.0 / 16.0, frameMod16 == 13,  7.0 / 16.0, \
	frameMod16 == 14, 15.0 / 16.0, frameMod16 == 15,  1.0 / 32.0, \
	0.0) * 2.0 - 1.0 \
) / viewWidth, \
(if( \
	frameMod16 ==  0,  1.0 /  3.0, frameMod16 ==  1,  2.0 /  3.0, \
	frameMod16 ==  2,  1.0 /  9.0, frameMod16 ==  3,  4.0 /  9.0, \
	frameMod16 ==  4,  7.0 /  9.0, frameMod16 ==  5,  2.0 /  9.0, \
	frameMod16 ==  6,  5.0 /  9.0, frameMod16 ==  7,  8.0 /  9.0, \
	frameMod16 ==  8,  1.0 / 27.0, frameMod16 ==  9, 10.0 / 27.0, \
	frameMod16 == 10, 19.0 / 27.0, frameMod16 == 11,  4.0 / 27.0, \
	frameMod16 == 12, 13.0 / 27.0, frameMod16 == 13, 22.0 / 27.0, \
	frameMod16 == 14,  7.0 / 27.0, frameMod16 == 15, 16.0 / 27.0, \
	0.0) * 2.0 - 1.0 \
) / viewHeight)

alphaTest.shadow = off
alphaTest.gbuffers_basic = off

blend.shadow = off
blend.gbuffers_basic = off

screen=SHADER_SKY_LIGHT LPV_DETAIL